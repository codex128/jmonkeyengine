/*
 * Copyright (c) 2024 jMonkeyEngine
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 * * Redistributions of source code must retain the above copyright
 *   notice, this list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright
 *   notice, this list of conditions and the following disclaimer in the
 *   documentation and/or other materials provided with the distribution.
 *
 * * Neither the name of 'jMonkeyEngine' nor the names of its contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.jme3.renderer.framegraph;

import com.jme3.renderer.framegraph.passes.RenderPass;
import com.jme3.asset.AssetManager;
import com.jme3.asset.FrameGraphKey;
import com.jme3.opencl.CommandQueue;
import com.jme3.opencl.Context;
import com.jme3.profile.AppProfiler;
import com.jme3.profile.FgStep;
import com.jme3.profile.VpStep;
import com.jme3.renderer.RenderManager;
import com.jme3.renderer.RendererException;
import com.jme3.renderer.ViewPort;
import com.jme3.renderer.framegraph.client.GraphSetting;
import com.jme3.renderer.framegraph.debug.GraphEventCapture;
import com.jme3.renderer.framegraph.passes.Attribute;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.function.Function;

/**
 * Manages render passes, dependencies, and resources in a node-based parameter system.
 * <p>
 * Rendering is a complicated task, involving many parameters and resources. The framegraph
 * aims to simplify rendering from the user's perspective, and limit the creation, binding,
 * and destruction of resources wherever possible.
 * <p>
 * Passes are expected to declare and describe beforehand the resources they plan on using
 * during execution. Passes can also reference resources declared by other passes. The resource
 * manager can determine from these "promises" which passes can be culled, as their contributions
 * would ultimately go unused.
 * <p>
 * During execution, passes expected ask the resource manager for the resource the declared or referenced
 * earlier. If the resource does not already exist (is virtual) the manager will either create a new
 * resource or allocate an existing, unused resource that qualifies based on the description provided
 * on declaration. Reallocation is usually preferred to reduce memory footprint.
 * <p>
 * FrameGraph execution occurs in four steps:
 * <ol>
 *  <li><strong>Preparation.</strong> Passes declare, reserve, and reference resources
 * during this step.</li>
 *  <li><strong>Culling.</strong> The resource manager determines which resources and
 * passes are unused, and culls them. This can often save loads of resources, as many
 * passes may not used for large parts of the application.</li>
 *  <li><strong>Execution.</strong> Passes that were not culled acquire the resources
 * they need, and perform rendering operations. All passes are expected to release
 * all resources they declared or referenced in the first step, however, this is done
 * automatically by {@link RenderPass}.</li>
 *  <li><strong>Reset.</strong> Passes perform whatever post-rendering cleanup is necessary.</li>
 * </ol>
 * <p>
 * Each step begins only after every qualifying pass has completed the previous step.
 * <p>
 * Passes are executed in the order they appear in the queue. This can sometimes lead
 * to unintended consequences, as a pass may use resources generated by a later queue.
 * 
 * @author codex
 */
public class FrameGraph {
    
    /**
     * Index of the {@link PassThread} running on the main render thread.
     */
    public static final int RENDER_THREAD = 0;
    
    private final AssetManager assetManager;
    private final ResourceList resources;
    private final FGRenderContext context;
    private final ArrayList<PassThread> threads = new ArrayList<>(1);
    private final HashMap<String, Object> settings = new HashMap<>();
    private final AtomicInteger incompleteQueues = new AtomicInteger(0);
    private String name = "FrameGraph";
    private boolean rendered = false;
    private Exception renderException;
    
    /**
     * Creates a new blank framegraph.
     * 
     * @param assetManager asset manager (not null)
     */
    public FrameGraph(AssetManager assetManager) {
        this.assetManager = assetManager;
        this.resources = new ResourceList(this);
        this.context = new FGRenderContext(this);
        this.threads.add(new PassThread(this, RENDER_THREAD));
    }
    /**
     * Creates a new framegraph from the given data.
     * 
     * @param assetManager
     * @param data 
     */
    public FrameGraph(AssetManager assetManager, FrameGraphData data) {
        this(assetManager);
        applyData(data);
    }
    /**
     * Creates a new framegraph from data obtained by the given asset key.
     * 
     * @param assetManager
     * @param key 
     */
    public FrameGraph(AssetManager assetManager, FrameGraphKey key) {
        this(assetManager, assetManager.loadFrameGraph(key));
    }
    /**
     * Creates a new framegraph from data obtained by the given asset name.
     * 
     * @param assetManager
     * @param dataAsset 
     */
    public FrameGraph(AssetManager assetManager, String dataAsset) {
        this(assetManager, assetManager.loadFrameGraph(dataAsset));
    }
    
    /**
     * Configures the rendering context.
     * <p>
     * Called automatically by the RenderManager before calling {@link #execute()}.
     * 
     * @param rm
     * @param vp viewport to render (not null)
     * @param prof profiler (may be null)
     * @param tpf time per frame
     */
    public void configure(RenderManager rm, ViewPort vp, AppProfiler prof, float tpf) {
        resources.setRenderManager(rm);
        context.target(rm, vp, prof, tpf);
    }
    /**
     * Executes this framegraph.
     * <p>
     * The overall execution step occurs in 4 stages:
     * <ol>
     *   <li>Preparation.</li>
     *   <li>Culling.</li>
     *   <li>Rendering (execution).</li>
     *   <li>Clean (reset).</li>
     * </ol>
     * 
     * @return true if this is the first execution of this FrameGraph this frame
     */
    public boolean execute() {
        // prepare
        ViewPort vp = context.getViewPort();
        AppProfiler prof = context.getProfiler();
        GraphEventCapture cap = context.getGraphCapture();
        if (cap != null) {
            cap.renderViewPort(context.getViewPort());
        }
        if (prof != null) prof.vpStep(VpStep.FrameGraphSetup, vp, null);
        if (!rendered) {
            resources.beginRenderingSession();
        }
        for (PassThread queue : threads) {
            for (RenderPass p : queue) {
                if (prof != null) prof.fgStep(FgStep.Prepare, p.getProfilerName());
                if (cap != null) cap.prepareRenderPass(p.getIndex(), p.getProfilerName());
                p.prepareRender(context);
            }
        }
        resources.applyFutureReferences();
        // cull passes and resources
        if (prof != null) prof.vpStep(VpStep.FrameGraphCull, vp, null);
        for (PassThread queue : threads) {
            for (RenderPass p : queue) {
                p.countReferences();
            }
        }
        resources.cullUnreferenced();
        // execute
        if (prof != null) prof.vpStep(VpStep.FrameGraphExecute, vp, null);
        context.pushRenderSettings();
        renderException = null;
        incompleteQueues.set(threads.size());
        for (int i = threads.size()-1; i >= 0; i--) {
            threads.get(i).execute(context);
        }
        if (renderException != null) {
            renderException.printStackTrace(System.err);
            throw new RendererException("An uncaught rendering exception occured, forcing the application to shut down.");
        }
        context.popFrameBuffer();
        // reset
        if (prof != null) prof.vpStep(VpStep.FrameGraphReset, vp, null);
        for (PassThread queue : threads) {
            for (RenderPass p : queue) {
                if (prof != null) prof.fgStep(FgStep.Reset, p.getProfilerName());
                p.resetRender(context);
            }
        }
        // cleanup resources
        resources.clear();
        if (rendered) return false;
        else return (rendered = true);
    }
    /**
     * Called automatically by the RenderManager after all rendering operations are
     * complete and this FrameGraph executed at least once this frame.
     */
    public void renderingComplete() {
        // notify passes
        for (PassThread queue : threads) {
            for (RenderPass p : queue) {
                p.renderingComplete();
            }
        }
        // reset flags
        rendered = false;
    }
    
    private PassThread getQueue(int i) {
        if (i >= threads.size()) {
            PassThread queue = new PassThread(this, i);
            threads.add(queue);
            return queue;
        } else if (i >= 0) {
            return threads.get(i);
        } else {
            return threads.get(RENDER_THREAD);
        }
    }
    
    /**
     * Adds the pass to end of the {@link PassThread} running on the main render thread.
     * 
     * @param <T>
     * @param pass
     * @return given pass
     */
    public <T extends RenderPass> T add(T pass) {
        return getQueue(RENDER_THREAD).add(pass);
    }
    /**
     * Adds the pass at the index.
     * <p>
     * If the thread index is &gt;= the total number of {@link PassThreads}s,
     * a new PassThread will be created for this to be added to.
     * <p>
     * If the queue index is &gt;= the current queue size, the pass will
     * be added to the end of the queue. Passes above the added pass
     * will have their indexes shifted.
     * 
     * @param <T>
     * @param pass
     * @param index
     * @return 
     */
    public <T extends RenderPass> T add(T pass, PassIndex index) {
        return getQueue(index.getThreadIndex()).add(pass, index);
    }
    
    /**
     * Adds an array of passes connected in series to the framegraph.
     * <p>
     * The named input ticket on each pass (except the first) is connected to
     * the named output ticket on the previous pass, creating a series of connected
     * passes. The array length determines the number of passes that will be added
     * and connected.
     * <p>
     * Null elements of the array are replaced using the Function.
     * 
     * @param <T>
     * @param array array of passes (elements may be null)
     * @param function creates passes where array elements are null (may be null)
     * @param inTicket name of the input ticket on each pass
     * @param outTicket name of the output ticket on each pass
     * @return array of passes
     * @see PassThread#addLoop(T[], int, java.util.function.Supplier, java.lang.String, java.lang.String)
     */
    public <T extends RenderPass> T[] addLoop(T[] array, Function<Integer, T> function,
            String inTicket, String outTicket) {
        return threads.get(RENDER_THREAD).addLoop(array, PassIndex.PASSIVE, function, inTicket, outTicket);
    }
    /**
     * Adds an array of passes connected in series to the framegraph.
     * <p>
     * The named input ticket on each pass (except the first) is connected to
     * the named output ticket on the previous pass.
     * 
     * @param <T>
     * @param array array of passes (elements may be null)
     * @param index index that passes are added to
     * @param function creates passes where array elements are null (may be null)
     * @param inTicket name of the input ticket on each pass
     * @param outTicket name of the output ticket on each pass
     * @return array of passes
     * @see PassThread#addLoop(T[], int, java.util.function.Supplier, java.lang.String, java.lang.String)
     */
    public <T extends RenderPass> T[] addLoop(T[] array, PassIndex index,
            Function<Integer, T> function, String inTicket, String outTicket) {
        return threads.get(index.getThreadIndex()).addLoop(array, index, function, inTicket, outTicket);
    }
    
    /**
     * Adds the passes from the given framegraph to this framegraph.
     * <p>
     * The retargeting array determines where each pass thread in the given
     * framegraph is added.
     * 
     * @param frameGraph
     * @param retarget indices to retarget threads to (not null, elements unaffected)
     */
    public void add(FrameGraph frameGraph, PassIndex... retarget) {
        final PassIndex index = new PassIndex();
        for (int i = 0; i < frameGraph.threads.size(); i++) {
            PassThread source = frameGraph.threads.get(i);
            index.set(retarget[i]);
            PassThread target = getQueue(index.threadIndex);
            for (RenderPass p : source) {
                target.add(p, index);
                if (!index.useDefaultThread()) {
                    index.queueIndex++;
                }
            }
        }
    }
    
    /**
     * Gets the first pass that qualifies.
     * 
     * @param <T>
     * @param by
     * @return first qualifying pass, or null
     */
    public <T extends RenderPass> T get(PassLocator<T> by) {
        for (PassThread q : threads) {
            T a = q.get(by);
            if (a != null) {
                return a;
            }
        }
        return null;
    }
    
    /**
     * Removes the pass at the index in the main {@link PassThread} (running on the main render thread).
     * <p>
     * Passes above the removed pass will have their indexes shifted.
     * 
     * @param i
     * @return removed pass
     * @throws IndexOutOfBoundsException if the index is less than zero or &gt;= the queue size
     */
    public RenderPass remove(int i) {
        return threads.get(RENDER_THREAD).remove(i);
    }
    /**
     * Removes the given pass from this FrameGraph.
     * <p>
     * Passes above the removed pass will have their indices shifted to
     * accomodate.
     * 
     * @param pass
     * @return true if the pass was removed from the queue
     */
    public boolean remove(RenderPass pass) {
        for (PassThread queue : threads) {
            if (queue.remove(pass)) {
                return true;
            }
        }
        return false;
    }
    /**
     * Clears all passes from this FrameGraph.
     */
    public void clear() {
        for (PassThread queue : threads) {
            queue.clear();
        }
    }
    
    /**
     * Registers the object under the name in the settings map.
     * <p>
     * Registered objects can be referenced by passes by name. Any existing
     * object already registered under the name will be replaced.
     * 
     * @param <T>
     * @param name
     * @param object
     * @return given object
     */
    public <T> T setSetting(String name, T object) {
        settings.put(name, object);
        return object;
    }
    /**
     * Registers the object under the name in the settings map, and creates
     * a {@link GraphSetting} with the same name.
     * 
     * @param <T>
     * @param name
     * @param object
     * @param create true to create a GraphSetting, otherwise one will not be created and null returned
     * @return created graph setting
     * @see #setSetting(java.lang.String, java.lang.Object)
     */
    public <T> GraphSetting<T> setSetting(String name, T object, boolean create) {
        setSetting(name, object);
        if (create) {
            return new GraphSetting<>(name);
        } else {
            return null;
        }
    }
    /**
     * Sets an integer in the settings map based on a boolean value.
     * <p>
     * If the boolean is true, 0 is written, otherwise -1 is written. This is
     * used primarily for Junction sources: 0 points to the first input, and -1
     * points to no input.
     * 
     * @param name
     * @param value
     * @return 
     * @see #setSetting(java.lang.String, java.lang.Object)
     */
    public int setJunctionSetting(String name, boolean value) {
        return setSetting(name, value ? 0 : -1);
    }
    /**
     * Gets the object registered under the name in the settings map,
     * or null if none is registered.
     * 
     * @param <T>
     * @param name
     * @return registered object, or null
     */
    public <T> T getSetting(String name) {
        Object obj = settings.get(name);
        if (obj != null) {
            return (T)obj;
        } else {
            return null;
        }
    }
    /**
     * Removes the object registered under the name in the settings map.
     * 
     * @param <T>
     * @param name
     * @return removed object, or null
     */
    public <T> T removeSetting(String name) {
        Object obj = settings.remove(name);
        if (obj != null) {
            return (T)obj;
        } else {
            return null;
        }
    }
    /**
     * Gets the settings map.
     * <p>
     * The returned map may be modified.
     * 
     * @return 
     */
    public HashMap<String, Object> getSettingsMap() {
        return settings;
    }
    
    /**
     * Sets the name of this FrameGraph.
     * 
     * @param name 
     */
    public void setName(String name) {
        this.name = name;
    }
    /**
     * Sets the OpenCL context used for compute shading.
     * 
     * @param clContext 
     */
    public void setCLContext(Context clContext) {
        context.setCLContext(clContext);
    }
    /**
     * Assigns this framegraph to the OpenCL command queue.
     * <p>
     * Passes do not need to use the assigned command queue, but are encouraged to.
     * 
     * @param clQueue 
     */
    public void setCLQueue(CommandQueue clQueue) {
        context.setCLQueue(clQueue);
    }
    
    /**
     * Called automatically to notify the FrameGraph that a {@link PassThread} has completed execution.
     * 
     * @param queue
     */
    public void notifyComplete(PassThread queue) {
        if (incompleteQueues.decrementAndGet() == 1) {
            for (PassThread q : threads) {
                q.notifyLast();
            }
        }
    }
    /**
     * Called automatically when a rendering exception occurs.
     * 
     * @param ex
     */
    public void interruptRendering(Exception ex) {
        assert ex != null : "Interrupting exception cannot be null.";
        renderException = ex;
        for (PassThread q : threads) {
            q.interrupt();
        }
    }
    
    /**
     * Gets the {@link AssetManager} assigned to this FrameGraph.
     * 
     * @return 
     */
    public AssetManager getAssetManager() {
        return assetManager;
    }
    /**
     * Gets the {@link ResourceList} that manages resources for this FrameGraph.
     * 
     * @return 
     */
    public ResourceList getResources() {
        return resources;
    }
    /**
     * Gets the rendering context.
     * 
     * @return 
     */
    public FGRenderContext getContext() {
        return context;
    }
    /**
     * Gets the RenderManager.
     * 
     * @return 
     */
    public RenderManager getRenderManager() {
        return context.getRenderManager();
    }
    /**
     * Gets the OpenCL context used for compute shading, or null if not set.
     * 
     * @return 
     */
    public Context getCLContext() {
        return context.getCLContext();
    }
    /**
     * Gets the name of this framegraph.
     * 
     * @return 
     */
    public String getName() {
        return name;
    }
    /**
     * Returns true if this framegraph is running asynchronous {@link PassThread}s.
     * 
     * @return 
     */
    public boolean isAsync() {
        return threads.size() > 1;
    }
    
    /**
     * Applies the {@link FrameGraphData} to this FrameGraph.
     * 
     * @param data
     * @return this instance
     */
    public final FrameGraph applyData(FrameGraphData data) {
        data.apply(this);
        return this;
    }
    /**
     * Applies the {@link FrameGraphData} to this FrameGraph.
     * 
     * @param data
     * @return this instance
     * @throws ClassCastException if the object is not an instance of {@link FrameGraphData}.
     * @throws NullPointerException if the object is null
     */
    public FrameGraph applyData(Object data) {
        if (data != null) {
            if (data instanceof FrameGraphData) {
                return applyData((FrameGraphData)data);
            } else {
                throw new ClassCastException(data.getClass()+" cannot be cast to "+FrameGraphData.class);
            }
        } else {
            throw new NullPointerException("Proxy cannot be null");
        }
    }
    /**
     * Loads and applies {@link FrameGraphData} from the key.
     * 
     * @param key
     * @return 
     */
    public FrameGraph loadData(FrameGraphKey key) {
        return applyData(assetManager.loadFrameGraph(key));
    }
    /**
     * Loads and applies {@link FrameGraphData} at the specified asset path.
     * 
     * @param assetPath
     * @return 
     */
    public FrameGraph loadData(String assetPath) {
        return applyData(assetManager.loadFrameGraph(assetPath));
    }
    /**
     * Creates exportable snapshot of this FrameGraph as {@link FrameGraphData}.
     * 
     * @return 
     */
    public FrameGraphData createData() {
        return new FrameGraphData(this, threads, settings);
    }
    
    @Override
    public String toString() {
        return "FrameGraph ("+name+")";
    }
    
}
